Index: blockchain.json
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>{\"blocks\": [{\"transaction_hashes\": [\"XSR8GoQ1eMEBlpBwSzg2PK4w3RvxF6LMPUyWqIHvkh8=\\n\"], \"transactions\": [{\"utxos\": [], \"receiver_public_keys\": [\"-----BEGIN PUBLIC KEY-----\\nMIICIjANBgkqhkiG9w0BAQEFAAOCAg8AMIICCgKCAgEAl20HC7xKreGy16YVuvNQ\\nheMJc62hLEs4S6iElS98cx6aHGJI3YAmahiB1uAdyX7unWtlwdeeKpdDtZ9b1XS9\\nR/kJi1vuJcmwTVAnDUCXWKd681+x3iSxnYT7tfSTzwbo3GWeTxnul3rWkd6EO546\\nhFSLQRI2zoDzOiEe7emb6gAW3PGHsyDAzDI+v2tThLIpJIaM2We6m0RoFxIDgDqX\\nORWS/V8i3UhAn1Ha5MMpowP+ajk8DOwOz2DsgtAn2930FmRK4ciJOpFV4d/1Y+qr\\npoSWMIOwyuO2iZLve/3SXP3ariyhxnd7gMmM0OWWX/9qNiQ5T8Fx6H8nolMyfg/k\\ncm7GCajczxGy8MEUvx4OfVxoxL0g2dxa9O9ZPEjx4M5HExsk/jM1kCiBThcL04BX\\nxHjMehdDWnPYDxmhXv5LZveYrobsrqJmHESI3Whp0n9vjUqSo2ugPsJI+DbQF5JI\\nplnU1bmTfO1W7ynzIw5Ry5Td7o2RhSXyk6zCtYvtrHXQt4pflaWJzrq8h2TeKU/n\\nG30sfQvpWy5KDLBI/71cZnqslChcQ6tnYSNStXS0o3aWhYAkIPI+ByKNiBKXX82V\\nvQQ14WELBorYCiGiDginapgUC7uKIVaj0nLEBbyim1jrnCWhsGbBK41tF7bPBRo/\\n8SHuIBtSTPi+L3MkAEfkklsCAwEAAQ==\\n-----END PUBLIC KEY-----\"], \"messages\": [50], \"signature\": \"\"}], \"hash_previous_block\": \"ZEvMflZDcwQJmarInnYi88px+6HZcv2Uoxw7+/JOOTg=\", \"nonce\": 0}, {\"transaction_hashes\": [\"BHQ8qXlm/LuDFDqqRtPbSvxkp4korv5KS9YVJpPPwsU=\\n\", \"jh+r+okpQFmBrB9DhSmZtW7pKilaFhRiLHYl7KeWwMo=\\n\"], \"transactions\": [{\"utxos\": [], \"receiver_public_keys\": [\"-----BEGIN PUBLIC KEY-----\\nMIICIjANBgkqhkiG9w0BAQEFAAOCAg8AMIICCgKCAgEAl20HC7xKreGy16YVuvNQ\\nheMJc62hLEs4S6iElS98cx6aHGJI3YAmahiB1uAdyX7unWtlwdeeKpdDtZ9b1XS9\\nR/kJi1vuJcmwTVAnDUCXWKd681+x3iSxnYT7tfSTzwbo3GWeTxnul3rWkd6EO546\\nhFSLQRI2zoDzOiEe7emb6gAW3PGHsyDAzDI+v2tThLIpJIaM2We6m0RoFxIDgDqX\\nORWS/V8i3UhAn1Ha5MMpowP+ajk8DOwOz2DsgtAn2930FmRK4ciJOpFV4d/1Y+qr\\npoSWMIOwyuO2iZLve/3SXP3ariyhxnd7gMmM0OWWX/9qNiQ5T8Fx6H8nolMyfg/k\\ncm7GCajczxGy8MEUvx4OfVxoxL0g2dxa9O9ZPEjx4M5HExsk/jM1kCiBThcL04BX\\nxHjMehdDWnPYDxmhXv5LZveYrobsrqJmHESI3Whp0n9vjUqSo2ugPsJI+DbQF5JI\\nplnU1bmTfO1W7ynzIw5Ry5Td7o2RhSXyk6zCtYvtrHXQt4pflaWJzrq8h2TeKU/n\\nG30sfQvpWy5KDLBI/71cZnqslChcQ6tnYSNStXS0o3aWhYAkIPI+ByKNiBKXX82V\\nvQQ14WELBorYCiGiDginapgUC7uKIVaj0nLEBbyim1jrnCWhsGbBK41tF7bPBRo/\\n8SHuIBtSTPi+L3MkAEfkklsCAwEAAQ==\\n-----END PUBLIC KEY-----\\n\"], \"messages\": [50], \"signature\": \"\"}, {\"utxos\": [{\"tx_hash\": \"XSR8GoQ1eMEBlpBwSzg2PK4w3RvxF6LMPUyWqIHvkh8=\\n\", \"public_key\": \"-----BEGIN PUBLIC KEY-----\\nMIICIjANBgkqhkiG9w0BAQEFAAOCAg8AMIICCgKCAgEAl20HC7xKreGy16YVuvNQ\\nheMJc62hLEs4S6iElS98cx6aHGJI3YAmahiB1uAdyX7unWtlwdeeKpdDtZ9b1XS9\\nR/kJi1vuJcmwTVAnDUCXWKd681+x3iSxnYT7tfSTzwbo3GWeTxnul3rWkd6EO546\\nhFSLQRI2zoDzOiEe7emb6gAW3PGHsyDAzDI+v2tThLIpJIaM2We6m0RoFxIDgDqX\\nORWS/V8i3UhAn1Ha5MMpowP+ajk8DOwOz2DsgtAn2930FmRK4ciJOpFV4d/1Y+qr\\npoSWMIOwyuO2iZLve/3SXP3ariyhxnd7gMmM0OWWX/9qNiQ5T8Fx6H8nolMyfg/k\\ncm7GCajczxGy8MEUvx4OfVxoxL0g2dxa9O9ZPEjx4M5HExsk/jM1kCiBThcL04BX\\nxHjMehdDWnPYDxmhXv5LZveYrobsrqJmHESI3Whp0n9vjUqSo2ugPsJI+DbQF5JI\\nplnU1bmTfO1W7ynzIw5Ry5Td7o2RhSXyk6zCtYvtrHXQt4pflaWJzrq8h2TeKU/n\\nG30sfQvpWy5KDLBI/71cZnqslChcQ6tnYSNStXS0o3aWhYAkIPI+ByKNiBKXX82V\\nvQQ14WELBorYCiGiDginapgUC7uKIVaj0nLEBbyim1jrnCWhsGbBK41tF7bPBRo/\\n8SHuIBtSTPi+L3MkAEfkklsCAwEAAQ==\\n-----END PUBLIC KEY-----\\n\", \"message\": 50}], \"receiver_public_keys\": [\"-----BEGIN PUBLIC KEY-----\\nMIICIjANBgkqhkiG9w0BAQEFAAOCAg8AMIICCgKCAgEAl20HC7xKreGy16YVuvNQ\\nheMJc62hLEs4S6iElS98cx6aHGJI3YAmahiB1uAdyX7unWtlwdeeKpdDtZ9b1XS9\\nR/kJi1vuJcmwTVAnDUCXWKd681+x3iSxnYT7tfSTzwbo3GWeTxnul3rWkd6EO546\\nhFSLQRI2zoDzOiEe7emb6gAW3PGHsyDAzDI+v2tThLIpJIaM2We6m0RoFxIDgDqX\\nORWS/V8i3UhAn1Ha5MMpowP+ajk8DOwOz2DsgtAn2930FmRK4ciJOpFV4d/1Y+qr\\npoSWMIOwyuO2iZLve/3SXP3ariyhxnd7gMmM0OWWX/9qNiQ5T8Fx6H8nolMyfg/k\\ncm7GCajczxGy8MEUvx4OfVxoxL0g2dxa9O9ZPEjx4M5HExsk/jM1kCiBThcL04BX\\nxHjMehdDWnPYDxmhXv5LZveYrobsrqJmHESI3Whp0n9vjUqSo2ugPsJI+DbQF5JI\\nplnU1bmTfO1W7ynzIw5Ry5Td7o2RhSXyk6zCtYvtrHXQt4pflaWJzrq8h2TeKU/n\\nG30sfQvpWy5KDLBI/71cZnqslChcQ6tnYSNStXS0o3aWhYAkIPI+ByKNiBKXX82V\\nvQQ14WELBorYCiGiDginapgUC7uKIVaj0nLEBbyim1jrnCWhsGbBK41tF7bPBRo/\\n8SHuIBtSTPi+L3MkAEfkklsCAwEAAQ==\\n-----END PUBLIC KEY-----\\n\"], \"messages\": [10], \"signature\": \"\"}], \"hash_previous_block\": \"o2D9HqTL/gI5hbVMQneUysystI33ThmZ23tUsKNcjfI=\\n\", \"nonce\": 6930722614107168764735819040}]}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/blockchain.json b/blockchain.json
--- a/blockchain.json	(revision 199fb7c67324c2adcdbdeb9459f9c330531b13b4)
+++ b/blockchain.json	(date 1662810425817)
@@ -1,1 +1,0 @@
-{"blocks": [{"transaction_hashes": ["XSR8GoQ1eMEBlpBwSzg2PK4w3RvxF6LMPUyWqIHvkh8=\n"], "transactions": [{"utxos": [], "receiver_public_keys": ["-----BEGIN PUBLIC KEY-----\nMIICIjANBgkqhkiG9w0BAQEFAAOCAg8AMIICCgKCAgEAl20HC7xKreGy16YVuvNQ\nheMJc62hLEs4S6iElS98cx6aHGJI3YAmahiB1uAdyX7unWtlwdeeKpdDtZ9b1XS9\nR/kJi1vuJcmwTVAnDUCXWKd681+x3iSxnYT7tfSTzwbo3GWeTxnul3rWkd6EO546\nhFSLQRI2zoDzOiEe7emb6gAW3PGHsyDAzDI+v2tThLIpJIaM2We6m0RoFxIDgDqX\nORWS/V8i3UhAn1Ha5MMpowP+ajk8DOwOz2DsgtAn2930FmRK4ciJOpFV4d/1Y+qr\npoSWMIOwyuO2iZLve/3SXP3ariyhxnd7gMmM0OWWX/9qNiQ5T8Fx6H8nolMyfg/k\ncm7GCajczxGy8MEUvx4OfVxoxL0g2dxa9O9ZPEjx4M5HExsk/jM1kCiBThcL04BX\nxHjMehdDWnPYDxmhXv5LZveYrobsrqJmHESI3Whp0n9vjUqSo2ugPsJI+DbQF5JI\nplnU1bmTfO1W7ynzIw5Ry5Td7o2RhSXyk6zCtYvtrHXQt4pflaWJzrq8h2TeKU/n\nG30sfQvpWy5KDLBI/71cZnqslChcQ6tnYSNStXS0o3aWhYAkIPI+ByKNiBKXX82V\nvQQ14WELBorYCiGiDginapgUC7uKIVaj0nLEBbyim1jrnCWhsGbBK41tF7bPBRo/\n8SHuIBtSTPi+L3MkAEfkklsCAwEAAQ==\n-----END PUBLIC KEY-----"], "messages": [50], "signature": ""}], "hash_previous_block": "ZEvMflZDcwQJmarInnYi88px+6HZcv2Uoxw7+/JOOTg=", "nonce": 0}, {"transaction_hashes": ["BHQ8qXlm/LuDFDqqRtPbSvxkp4korv5KS9YVJpPPwsU=\n", "jh+r+okpQFmBrB9DhSmZtW7pKilaFhRiLHYl7KeWwMo=\n"], "transactions": [{"utxos": [], "receiver_public_keys": ["-----BEGIN PUBLIC KEY-----\nMIICIjANBgkqhkiG9w0BAQEFAAOCAg8AMIICCgKCAgEAl20HC7xKreGy16YVuvNQ\nheMJc62hLEs4S6iElS98cx6aHGJI3YAmahiB1uAdyX7unWtlwdeeKpdDtZ9b1XS9\nR/kJi1vuJcmwTVAnDUCXWKd681+x3iSxnYT7tfSTzwbo3GWeTxnul3rWkd6EO546\nhFSLQRI2zoDzOiEe7emb6gAW3PGHsyDAzDI+v2tThLIpJIaM2We6m0RoFxIDgDqX\nORWS/V8i3UhAn1Ha5MMpowP+ajk8DOwOz2DsgtAn2930FmRK4ciJOpFV4d/1Y+qr\npoSWMIOwyuO2iZLve/3SXP3ariyhxnd7gMmM0OWWX/9qNiQ5T8Fx6H8nolMyfg/k\ncm7GCajczxGy8MEUvx4OfVxoxL0g2dxa9O9ZPEjx4M5HExsk/jM1kCiBThcL04BX\nxHjMehdDWnPYDxmhXv5LZveYrobsrqJmHESI3Whp0n9vjUqSo2ugPsJI+DbQF5JI\nplnU1bmTfO1W7ynzIw5Ry5Td7o2RhSXyk6zCtYvtrHXQt4pflaWJzrq8h2TeKU/n\nG30sfQvpWy5KDLBI/71cZnqslChcQ6tnYSNStXS0o3aWhYAkIPI+ByKNiBKXX82V\nvQQ14WELBorYCiGiDginapgUC7uKIVaj0nLEBbyim1jrnCWhsGbBK41tF7bPBRo/\n8SHuIBtSTPi+L3MkAEfkklsCAwEAAQ==\n-----END PUBLIC KEY-----\n"], "messages": [50], "signature": ""}, {"utxos": [{"tx_hash": "XSR8GoQ1eMEBlpBwSzg2PK4w3RvxF6LMPUyWqIHvkh8=\n", "public_key": "-----BEGIN PUBLIC KEY-----\nMIICIjANBgkqhkiG9w0BAQEFAAOCAg8AMIICCgKCAgEAl20HC7xKreGy16YVuvNQ\nheMJc62hLEs4S6iElS98cx6aHGJI3YAmahiB1uAdyX7unWtlwdeeKpdDtZ9b1XS9\nR/kJi1vuJcmwTVAnDUCXWKd681+x3iSxnYT7tfSTzwbo3GWeTxnul3rWkd6EO546\nhFSLQRI2zoDzOiEe7emb6gAW3PGHsyDAzDI+v2tThLIpJIaM2We6m0RoFxIDgDqX\nORWS/V8i3UhAn1Ha5MMpowP+ajk8DOwOz2DsgtAn2930FmRK4ciJOpFV4d/1Y+qr\npoSWMIOwyuO2iZLve/3SXP3ariyhxnd7gMmM0OWWX/9qNiQ5T8Fx6H8nolMyfg/k\ncm7GCajczxGy8MEUvx4OfVxoxL0g2dxa9O9ZPEjx4M5HExsk/jM1kCiBThcL04BX\nxHjMehdDWnPYDxmhXv5LZveYrobsrqJmHESI3Whp0n9vjUqSo2ugPsJI+DbQF5JI\nplnU1bmTfO1W7ynzIw5Ry5Td7o2RhSXyk6zCtYvtrHXQt4pflaWJzrq8h2TeKU/n\nG30sfQvpWy5KDLBI/71cZnqslChcQ6tnYSNStXS0o3aWhYAkIPI+ByKNiBKXX82V\nvQQ14WELBorYCiGiDginapgUC7uKIVaj0nLEBbyim1jrnCWhsGbBK41tF7bPBRo/\n8SHuIBtSTPi+L3MkAEfkklsCAwEAAQ==\n-----END PUBLIC KEY-----\n", "message": 50}], "receiver_public_keys": ["-----BEGIN PUBLIC KEY-----\nMIICIjANBgkqhkiG9w0BAQEFAAOCAg8AMIICCgKCAgEAl20HC7xKreGy16YVuvNQ\nheMJc62hLEs4S6iElS98cx6aHGJI3YAmahiB1uAdyX7unWtlwdeeKpdDtZ9b1XS9\nR/kJi1vuJcmwTVAnDUCXWKd681+x3iSxnYT7tfSTzwbo3GWeTxnul3rWkd6EO546\nhFSLQRI2zoDzOiEe7emb6gAW3PGHsyDAzDI+v2tThLIpJIaM2We6m0RoFxIDgDqX\nORWS/V8i3UhAn1Ha5MMpowP+ajk8DOwOz2DsgtAn2930FmRK4ciJOpFV4d/1Y+qr\npoSWMIOwyuO2iZLve/3SXP3ariyhxnd7gMmM0OWWX/9qNiQ5T8Fx6H8nolMyfg/k\ncm7GCajczxGy8MEUvx4OfVxoxL0g2dxa9O9ZPEjx4M5HExsk/jM1kCiBThcL04BX\nxHjMehdDWnPYDxmhXv5LZveYrobsrqJmHESI3Whp0n9vjUqSo2ugPsJI+DbQF5JI\nplnU1bmTfO1W7ynzIw5Ry5Td7o2RhSXyk6zCtYvtrHXQt4pflaWJzrq8h2TeKU/n\nG30sfQvpWy5KDLBI/71cZnqslChcQ6tnYSNStXS0o3aWhYAkIPI+ByKNiBKXX82V\nvQQ14WELBorYCiGiDginapgUC7uKIVaj0nLEBbyim1jrnCWhsGbBK41tF7bPBRo/\n8SHuIBtSTPi+L3MkAEfkklsCAwEAAQ==\n-----END PUBLIC KEY-----\n"], "messages": [10], "signature": ""}], "hash_previous_block": "o2D9HqTL/gI5hbVMQneUysystI33ThmZ23tUsKNcjfI=\n", "nonce": 6930722614107168764735819040}]}
\ No newline at end of file
Index: Main.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>from Wallet import Wallet\r\nfrom Miner import Miner\r\nfrom multiprocessing import Process\r\n\r\nwallet = Wallet()\r\nwallet.send_money([wallet.public_key], [10])\r\nwallet.send_money([wallet.public_key], [5])\r\nwallet.send_money([wallet.public_key], [5])\r\nwallet.send_money([wallet.public_key], [10])\r\nwallet.send_money([wallet.public_key], [20])\r\nwallet.send_money([wallet.public_key], [10])\r\n# print(get_blockchain().blocks)\r\n\r\nif __name__ == '__main__':\r\n    p = Process(target=Miner, args=(wallet.public_key,))\r\n    p.start()\r\n    p.join()\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/Main.py b/Main.py
--- a/Main.py	(revision 199fb7c67324c2adcdbdeb9459f9c330531b13b4)
+++ b/Main.py	(date 1662815531502)
@@ -2,6 +2,8 @@
 from Miner import Miner
 from multiprocessing import Process
 
+
+
 wallet = Wallet()
 wallet.send_money([wallet.public_key], [10])
 wallet.send_money([wallet.public_key], [5])
@@ -9,7 +11,7 @@
 wallet.send_money([wallet.public_key], [10])
 wallet.send_money([wallet.public_key], [20])
 wallet.send_money([wallet.public_key], [10])
-# print(get_blockchain().blocks)
+
 
 if __name__ == '__main__':
     p = Process(target=Miner, args=(wallet.public_key,))
Index: Server.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>import flask\r\nimport logging\r\nimport json\r\nfrom flask import request, Response\r\nfrom multiprocessing import Process\r\nfrom Blockchain import get_blockchain\r\n\r\nfrom Wallet import Wallet\r\nfrom Miner import Miner\r\n\r\napp = flask.Flask(__name__)  \r\n\r\n# @app.route('/mine', methods=['POST'])\r\n# def mine():\r\n#   if request.method == 'POST':\r\n#     global p\r\n#     wallet = Wallet()\r\n#     p = Process(target=Miner, args=(wallet.public_key,))\r\n#     p.start()\r\n#     return \"Mining\"\r\n#   return \"Wrong HTTP method\"\r\n\r\n@app.route('/send', methods=['POST'])\r\ndef send():\r\n  if request.method == 'POST':\r\n    data = request.get_json(silent=True)\r\n    try:\r\n      wallet = Wallet()\r\n      wallet.send_money([wallet.public_key], [data['amount']])\r\n      result = json.dumps(get_blockchain().get_topmost_block().get_dict())\r\n      return Response(result, mimetype='text/json')\r\n    except Exception as e:\r\n      logging.error(e,exc_info=True)\r\n      return repr(e)\r\n  return \"Wrong HTTP method\"\r\n\r\n@app.route('/block', methods=['GET'])\r\ndef getBlocks():\r\n  if request.method == 'GET':\r\n    try:\r\n      return Response(get_blockchain().get_blockhashes_json(), mimetype='text/json')\r\n    except Exception as e:\r\n      logging.error(e,exc_info=True)\r\n      return repr(e)\r\n  return \"Wrong HTTP method\"\r\n\r\n@app.route('/block/<blockhash>', methods=['GET'])\r\ndef getBlock(blockhash):\r\n  if request.method == 'GET':\r\n    try:\r\n      block = get_blockchain().get_block_by_hash(blockhash)\r\n      if block == None:\r\n        return repr(\"Error: No block found with this hash\")\r\n      else:\r\n        return Response(json.dumps(block.get_dict()), mimetype='text/json')\r\n    except Exception as e:\r\n      logging.error(e,exc_info=True)\r\n      return repr(e)\r\n  return \"Wrong HTTP method\"\r\n\r\n@app.route('/block/<blockhash>/tx', methods=['GET'])\r\ndef getTxs(blockhash):\r\n  if request.method == 'GET':\r\n    try:\r\n      block = get_blockchain().get_block_by_hash(blockhash)\r\n      if block == None:\r\n        return repr(\"Error: No block found with this hash\")\r\n      else:\r\n        return Response(json.dumps(block.get_transactions()), mimetype='text/json')\r\n    except Exception as e:\r\n      logging.error(e,exc_info=True)\r\n      return repr(e)\r\n  return \"Wrong HTTP method\"\r\n\r\n@app.route('/block/<blockhash>/tx/<txhash>', methods=['GET'])\r\ndef getTx(blockhash,txhash):\r\n  if request.method == 'GET':\r\n    try:\r\n      block = get_blockchain().get_block_by_hash(blockhash)\r\n      if block == None:\r\n        return repr(\"Error: No block found with this hash\")\r\n      else:\r\n        tx = block.get_tx_by_hash(txhash)\r\n        if tx == None:\r\n          return repr(\"Error: No tx found with this hash\")\r\n        else:\r\n          return Response(json.dumps(tx.get_dict()), mimetype='text/json')\r\n    except Exception as e:\r\n      logging.error(e,exc_info=True)\r\n      return repr(e)\r\n  return \"Wrong HTTP method\"\r\n\r\ndef init_server():\r\n  logging.basicConfig(level=logging.INFO)\r\n  logging.info(\"Team 4 Blockchain starting up\")\r\n  wallet = Wallet()\r\n  global p\r\n  p = Process(target=Miner, args=(wallet.public_key,))\r\n  p.start()\r\n\r\nif __name__ == '__main__':\r\n  init_server()\r\n  app.run(host='0.0.0.0', port=8100, threaded=True, debug=True, use_reloader=False)\r\n  \r\n  
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/Server.py b/Server.py
--- a/Server.py	(revision 199fb7c67324c2adcdbdeb9459f9c330531b13b4)
+++ b/Server.py	(date 1662918715930)
@@ -1,7 +1,7 @@
 import flask
 import logging
 import json
-from flask import request, Response
+from flask import request, Response, render_template
 from multiprocessing import Process
 from Blockchain import get_blockchain
 
@@ -20,13 +20,18 @@
 #     return "Mining"
 #   return "Wrong HTTP method"
 
+@app.route('/')
+def start():
+  return render_template('WalletUIDummy.html', var = "Test")
+
 @app.route('/send', methods=['POST'])
 def send():
   if request.method == 'POST':
-    data = request.get_json(silent=True)
     try:
+      logging.info(request)
+      #data = request.get_json(force=True)
       wallet = Wallet()
-      wallet.send_money([wallet.public_key], [data['amount']])
+      wallet.send_money([wallet.public_key], [int(request.form['amount'])])
       result = json.dumps(get_blockchain().get_topmost_block().get_dict())
       return Response(result, mimetype='text/json')
     except Exception as e:
@@ -38,6 +43,8 @@
 def getBlocks():
   if request.method == 'GET':
     try:
+      response = "working" #get_blockchain().get_blockhashes_json()
+      #return render_template('WalletUIDummy.html', blocks_to_return = response)
       return Response(get_blockchain().get_blockhashes_json(), mimetype='text/json')
     except Exception as e:
       logging.error(e,exc_info=True)
@@ -100,6 +107,6 @@
 
 if __name__ == '__main__':
   init_server()
-  app.run(host='0.0.0.0', port=8100, threaded=True, debug=True, use_reloader=False)
+  app.run(host='0.0.0.0', port=8100, threaded=True, debug=True)
   
   
\ No newline at end of file
Index: Blockchain.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>import json\r\nimport os\r\nimport hashing\r\nimport utilities\r\nfrom Block import Block\r\nfrom CONFIG import mining_target\r\nfrom Genesis import genesis_coinbase\r\nfrom Transaction import Transaction\r\nfrom UTXO import UTXO\r\n\r\nthe_blockchain = None\r\n\r\n\r\ndef get_blockchain():\r\n    global the_blockchain\r\n    # This is commented out because we should always read from file, as we cannot trust the memory in Multiprocess-Environment\r\n    # if the_blockchain == None:\r\n    the_blockchain = Blockchain([])\r\n    # Can be used to initialize the blockchains from the JSON file\r\n    the_blockchain.read_from_blockchain()\r\n    return the_blockchain\r\n\r\n\r\nclass Blockchain:\r\n    def __init__(self, blocks):\r\n        self.blocks = blocks if len(blocks) > 1 else [Block(\"ZEvMflZDcwQJmarInnYi88px+6HZcv2Uoxw7+/JOOTg=\",\r\n                                                            [genesis_coinbase()], 0)]\r\n\r\n    def insert_block(self, block):\r\n        if not isinstance(block, Block):\r\n            return False\r\n        for tx in block.transactions:\r\n            if not tx.is_valid():\r\n                return False\r\n            if isinstance(tx, Transaction):\r\n                for utxo in tx.utxos:\r\n                    if not self.is_valid_UTXO(utxo):\r\n                        return False\r\n        if not self.check_agains_target(block.get_hash()):\r\n            return False\r\n        self.blocks.append(block)\r\n        self.write_to_blockchain()\r\n        return True\r\n\r\n    def check_agains_target(self, hash_string):\r\n        hex = hashing.string_to_hex(hash_string)\r\n        for i in range(1, mining_target+1):\r\n            if not hex[i] == \"0\":\r\n                return False\r\n        return True\r\n\r\n    def get_utxos(self, public_key):\r\n        utxos = []\r\n        for block in self.blocks:\r\n            for tx in block.transactions:\r\n                counter = 0\r\n                for pk in tx.receiver_public_keys:\r\n                    if pk in public_key:\r\n                        utxo = UTXO(tx.get_hash(), public_key,\r\n                                    tx.messages[counter])\r\n                        utxos.append(utxo)\r\n                    counter = counter + 1\r\n        return utxos\r\n\r\n    def get_topmost_block(self):\r\n        return self.blocks[len(self.blocks)-1]\r\n\r\n    def is_valid_UTXO(self, UTXO):\r\n        valid = False\r\n        # blocks = self.read_from_blockchain()\r\n        blocks = self.blocks\r\n        #find possible UTXO on Blockchain\r\n        for block in blocks:\r\n            # for tx in block[\"transactions\"]:\r\n            for tx in block.transactions:\r\n                if tx.get_hash() == UTXO.tx_hash:\r\n                    counter = 0\r\n                    for pk in tx.receiver_public_keys:\r\n                        if pk in UTXO.public_key:\r\n                            if UTXO.message == tx.messages[counter]:\r\n                                valid = True\r\n                        counter = counter + 1\r\n        if valid == False:\r\n            return False\r\n        #check double_spending\r\n        for block in blocks:\r\n            for tx in block.transactions:\r\n                if isinstance(tx, Transaction):\r\n                    for tx_utxo in tx.utxos:\r\n                        if tx_utxo.get_hash() != UTXO.get_hash():\r\n                            print(\"Breaks here\")\r\n                            return False\r\n        return True\r\n\r\n    def get_json(self):\r\n        return json.dumps({\"blocks\": [block.get_dict() for block in self.blocks]})\r\n\r\n    def get_blockhashes_json(self):\r\n        return json.dumps({\"blocks\": [block.get_hash() for block in self.blocks]})\r\n\r\n    def get_block_by_hash(self, hash):\r\n        for block in self.blocks:\r\n            if block.get_hash() == hash:\r\n                return block\r\n                \r\n    def write_to_blockchain(self):\r\n        with open(\"blockchain.json\", \"w\") as save_file:\r\n            save_file.write(self.get_json())\r\n\r\n    def read_from_blockchain(self):\r\n        with open(\"blockchain.json\", \"r\") as save_file:\r\n            if os.stat(\"blockchain.json\").st_size != 0:\r\n                blocks = json.load(save_file)\r\n                self.blocks = [\r\n                    Block(\r\n                        hash_previous_block=x[\"hash_previous_block\"],\r\n                        nonce=x[\"nonce\"],\r\n                        transactions=utilities.serialize_transactions(x[\"transactions\"] if \"transactions\" in x else []),\r\n                    ) for x in blocks[\"blocks\"]\r\n                ]\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/Blockchain.py b/Blockchain.py
--- a/Blockchain.py	(revision 199fb7c67324c2adcdbdeb9459f9c330531b13b4)
+++ b/Blockchain.py	(date 1662815531513)
@@ -10,7 +10,6 @@
 
 the_blockchain = None
 
-
 def get_blockchain():
     global the_blockchain
     # This is commented out because we should always read from file, as we cannot trust the memory in Multiprocess-Environment
Index: mempool.json
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/mempool.json b/mempool.json
--- a/mempool.json	(revision 199fb7c67324c2adcdbdeb9459f9c330531b13b4)
+++ b/mempool.json	(date 1662918723332)
@@ -1,0 +1,1 @@
+{"txs": [{"utxos": [{"tx_hash": "c76a7db9945786bb78602cc0671a2868d4e78e031e71e8a71cdeca1e38e6094e", "public_key": "-----BEGIN PUBLIC KEY-----\nMIICIjANBgkqhkiG9w0BAQEFAAOCAg8AMIICCgKCAgEAl20HC7xKreGy16YVuvNQ\nheMJc62hLEs4S6iElS98cx6aHGJI3YAmahiB1uAdyX7unWtlwdeeKpdDtZ9b1XS9\nR/kJi1vuJcmwTVAnDUCXWKd681+x3iSxnYT7tfSTzwbo3GWeTxnul3rWkd6EO546\nhFSLQRI2zoDzOiEe7emb6gAW3PGHsyDAzDI+v2tThLIpJIaM2We6m0RoFxIDgDqX\nORWS/V8i3UhAn1Ha5MMpowP+ajk8DOwOz2DsgtAn2930FmRK4ciJOpFV4d/1Y+qr\npoSWMIOwyuO2iZLve/3SXP3ariyhxnd7gMmM0OWWX/9qNiQ5T8Fx6H8nolMyfg/k\ncm7GCajczxGy8MEUvx4OfVxoxL0g2dxa9O9ZPEjx4M5HExsk/jM1kCiBThcL04BX\nxHjMehdDWnPYDxmhXv5LZveYrobsrqJmHESI3Whp0n9vjUqSo2ugPsJI+DbQF5JI\nplnU1bmTfO1W7ynzIw5Ry5Td7o2RhSXyk6zCtYvtrHXQt4pflaWJzrq8h2TeKU/n\nG30sfQvpWy5KDLBI/71cZnqslChcQ6tnYSNStXS0o3aWhYAkIPI+ByKNiBKXX82V\nvQQ14WELBorYCiGiDginapgUC7uKIVaj0nLEBbyim1jrnCWhsGbBK41tF7bPBRo/\n8SHuIBtSTPi+L3MkAEfkklsCAwEAAQ==\n-----END PUBLIC KEY-----\n", "message": 50}], "receiver_public_keys": ["-----BEGIN PUBLIC KEY-----\nMIICIjANBgkqhkiG9w0BAQEFAAOCAg8AMIICCgKCAgEAl20HC7xKreGy16YVuvNQ\nheMJc62hLEs4S6iElS98cx6aHGJI3YAmahiB1uAdyX7unWtlwdeeKpdDtZ9b1XS9\nR/kJi1vuJcmwTVAnDUCXWKd681+x3iSxnYT7tfSTzwbo3GWeTxnul3rWkd6EO546\nhFSLQRI2zoDzOiEe7emb6gAW3PGHsyDAzDI+v2tThLIpJIaM2We6m0RoFxIDgDqX\nORWS/V8i3UhAn1Ha5MMpowP+ajk8DOwOz2DsgtAn2930FmRK4ciJOpFV4d/1Y+qr\npoSWMIOwyuO2iZLve/3SXP3ariyhxnd7gMmM0OWWX/9qNiQ5T8Fx6H8nolMyfg/k\ncm7GCajczxGy8MEUvx4OfVxoxL0g2dxa9O9ZPEjx4M5HExsk/jM1kCiBThcL04BX\nxHjMehdDWnPYDxmhXv5LZveYrobsrqJmHESI3Whp0n9vjUqSo2ugPsJI+DbQF5JI\nplnU1bmTfO1W7ynzIw5Ry5Td7o2RhSXyk6zCtYvtrHXQt4pflaWJzrq8h2TeKU/n\nG30sfQvpWy5KDLBI/71cZnqslChcQ6tnYSNStXS0o3aWhYAkIPI+ByKNiBKXX82V\nvQQ14WELBorYCiGiDginapgUC7uKIVaj0nLEBbyim1jrnCWhsGbBK41tF7bPBRo/\n8SHuIBtSTPi+L3MkAEfkklsCAwEAAQ==\n-----END PUBLIC KEY-----\n"], "messages": [2]}]}
\ No newline at end of file
